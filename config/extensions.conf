[general]
static=yes
writeprotect=yes
clearglobalvars=no

[globals]
TRUNK=DAHDI/G2                                  ; Trunk interface
TRUNKMSD=1                                      ; MSD digits to strip (usually 1 or 0)

;//////////////////////////////////////////////////////////////////
;///////////////   ACE Direct Dial Plan    ///////////////////////
;////////////////////////////////////////////////////////////////

[handler]
exten => addheader,1,Set(PJSIP_HEADER(add,Call-Info)=<sip:${agent_ip}> , purpose=trs-user-ip) ; cjm-dec17 -- compliance with RUE location info
exten => addheader,n,Return()  ;exit subroutine
exten => addheader,n,HangUp()  ;if Return fails, hangup the call

[from-internal]
include => codecid

exten => set_video_codec_outbound,1,NoOp()
        same => n,Set(PJSIP_MEDIA_OFFER(video)=${ARG1})
	same => n,DumpChan()
        same => n,Return()

exten => start,1,NoOp()
	same => n,Set(JITTERBUFFER(adaptive)=800,,60)
    	same => n,Set(PJSIP_MEDIA_OFFER(video)=h264)
   	same => n,Set(PJSIP_SEND_SESSION_REFRESH()=invite)
    	same => n,DumpChan()
    	same => n,Return()
    	same => n,HangUp()

;Handle extraneous external inbound calls
exten => _[+].1${DB(GLOBAL/DIALIN)},1,Goto(from-providers,_${DB(GLOBAL/DIALIN)},1)
exten => _1${DB(GLOBAL/DIALIN)},1,Goto(from-providers,_${DB(GLOBAL/DIALIN)},1)
exten => ${DB(GLOBAL/DIALIN)},1,Goto(from-providers,_${DB(GLOBAL/DIALIN)},1)

;WebRTC Direct Route to General Questions Queue
exten => _575781,1,Answer()
  	same => n,DumpChan()
  	same => n,GoTo(General_Questions,start,1)
  	same => n,HangUp()

;WebRTC Direct Route to VideoMail Queue
exten => _575795,1,Answer()
        same => n,DumpChan()
        same => n,Queue(MailQueue)
        same => n,HangUp()

;WebRTC Direct Route to Complaints Queue
exten => _575791,1,Answer()
  	same => n,DumpChan()
  	same => n,GoTo(Complaints,start,1)
  	same => n,HangUp()


;**********************************************************************
; VideoMail
;**********************************************************************
exten => 8888,1,voicemail(9999@voicemail)
exten => 9999,1,voicemailmain(9999@voicemail)

;************************************
; Extensions
;************************************

;Outbound dialing
exten => _XXXXXXXXXX,1,NoOp("Caller ID: ${CALLERID(number)}")
    	same => n,Set(CALLERID(all)="ACE Direct" <${DB(GLOBAL/DIALIN)}>)
    	same => n,Verbose(2,The origin video codecs being sent outbound are ${PJSIP_MEDIA_OFFER(video)})
	same => n,Verbose(2,The origin audio codecs being sent outbound are ${PJSIP_MEDIA_OFFER(audio)})
	same => n,AGI(itrslookup.sh,${EXTEN},"simple")
    	same => n,NoOp("number: ${EXTEN} has iTRS sipuri: ${sipuri}")
    ;If a blank URI this is a hearing user, direct to Twilio
    	same => n,GotoIf($["${sipuri}" = "" ]?from-phones,${EXTEN},1)
    ;else do a direct dial
    	same => n,AGI(itrslookup.sh,${EXTEN},"full")
    	same => n,NoOp("number: ${EXTEN} has SVR record uri: ${uri}")
    	same => n,Set(agent_addr=${CHANNEL(pjsip,remote_addr)})
        same => n,Set(_agent_ip=${CUT(agent_addr,:,1)})
    	same => n,Dial(PJSIP/Provider${endpoint}/sip:+1${EXTEN}@${uri},180,b(handler^addheader^1))
	same => n,DumpChan()
    	same => n,HangUp()

;NOTE: Use the below code to facilitate DIRECT dialing from agent:agent, only if and when it is necessary to do so.
	;same => n,Dial(PJSIP/${EXTEN},,b(from-internal^set_video_codec_outbound^1(${PJSIP_MEDIA_OFFER(video)})))

;Agents
exten => _30xxx,1,Answer()
	same => n,Dial(PJSIP/${EXTEN},30,t)
	same => n,DumpChan()
	same => n,HangUp()

;Reserved
exten => _40XX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

;Reserved
exten => _50XX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

;Reserved
exten => _60XXX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

;Reserved
exten => _70XXX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
	same => n,HangUp()

;Auto-Answer Agent
exten => _800XX,1,Answer()
        same => n,DumpChan()
	same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

;WebRTC Consumers
exten => _900XX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},,b(from-internal^start^1(${PJSIP_MEDIA_OFFER(video)})))
	;same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()


;Agents kurento srtp
exten => _33xxx,1,Answer()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,DumpChan()
        same => n,Hangup()

;WebRTC srtp kurento Consumers
exten => _990xx,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,Hangup()


;Provider calls from the queue
exten => ${DB(GLOBAL/DIALIN)},1,NoOp()
    	same => n,Set(JITTERBUFFER(adaptive)=800,,60)
   	same => n,Set(codec=h264) ;sets arg for console verbosity
    	same => n,Set(PJSIP_MEDIA_OFFER(video)=${codec})  ;sets codec ;changed by JE 11-16-17
    	same => n,Set(PJSIP_SEND_SESSION_REFRESH()=invite) ;sends new invite
    	same => n,DumpChan()  ;verbose console dump
    	same => n,Return()  ;exit subroutine
    	same => n,HangUp()  ;if Return fails, hangup the call

[from-providers]

;Handle inbound VRS calls from provider phones. Some provider phones will send unique prefixes with the numbers. This block of number sequences will handle those.
exten => _${DB(GLOBAL/DIALIN)},1,GoTo(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => +1${DB(GLOBAL/DIALIN)},1,GoTo(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _1${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _X${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _XX${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _[+].X${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)

;Call Center Hours of Operations
; Logic:
;	If BUSINESS_HOURS/ACTIVE==2, call center is closed for all hours/days, go to CallCenterClosed extension
;	If BUSINESS_HOURS/ACTIVE==0, business hours check is enforced, go to AfterHoursCheck
;	If BUSINESS_HOURS/ACTIVE==1, call center is open for all hours/days, go to from-providers_caller_query
exten => ${DB(GLOBAL/DIALIN)},1,GotoIf($["${DB(BUSINESS_HOURS/ACTIVE)}" != "2"]?AfterHoursActive:CallCenterClosed)
	same => n(AfterHoursActive),GotoIf($["${DB(BUSINESS_HOURS/ACTIVE)}" = "0"]?AfterHoursCheck:from-providers_caller_query,start,2)
	same => n(AfterHoursCheck),GotoIfTime(${DB(BUSINESS_HOURS/START)}-${DB(BUSINESS_HOURS/END)},mon-fri,*,*?CallCenterOpen:CallCenterClosed)
        same => n(CallCenterOpen),Answer()
 		same => n,DumpChan() ;dumps all available vars for the given channel
 		same => n,NoOp("Caller ID is: ${CALLERID(number)}")  ;informational
 		same => n,NoOp("..and Call Center is OPEN!")
 		same => n,Goto(from-providers_caller_query,start,2)

	 same => n(CallCenterClosed),Answer()
 		same => n, DumpChan()
		same => n,NoOp("Caller ID is: ${CALLERID(number)}")
		same => n,NoOp("..and Call Center is CLOSED!")
 		same => n,Goto(call_center_closed_caller_query,start,2)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          ********** I V R for PROVIDER NUMBERS **********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; IVR and determination for proper Voice Q
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;::::::::::THE DTMF MENU::::::::::::::::::
;The following syntax defines the DTMF menu users will see when dialing in from a video phone. Currently, options 4, and 5, are configured to route to the queues while option 9 will route to the videomail queue. A caller will also be routed to the videomail queue if a selection is not made within the alloted time in seconds.
[from-providers_caller_query]
exten => start,1,(start)
exten => start,n,Verbose(2,${CALLERID(number)} entering the query from your provider for proper queue placement.)
exten => start,n,Goto(start,21)
exten => start,21,Background(je_mainmenu)
exten => start,n,Goto(start,25)
exten => start,25,WaitExten(30)
exten => start,n,Verbose(2,${CALLERID(number)} Has not made a selection, dial plan will now escort the caller to the videomail queue.)
exten => start,n,Goto(9,1)
;exten => start,n,Goto(Provider_Complaints,start,1) ;disabled, enable to have external callers go straight to the complaints queue bypassing lengthy videos. Useful for inbound test calls.

; HANDLE THE DTMF CODES AS AN EXTENSION
exten => 0,1,Playback(number_0-recording0)
exten => 0,n,Goto(i,1)

exten => 1,1,Playback(1)
exten => 1,n,Goto(i,1)

exten => 2,1,Playback(2)
exten => 2,n,Goto(i,1)

exten => 3,1,Playback(3)
exten => 3,n,Goto(i,1)

exten => 4,1,Playback(4)
exten => 4,n,Goto(Provider_General_Questions,start,1)

exten => 5,1,Playback(5)
exten => 5,n,Goto(Provider_Complaints,start,1)

exten => 6,1,Playback(6)
exten => 6,n,Goto(i,1)

exten => 7,1,Playback(7)
exten => 7,n,Goto(i,1)

exten => 8,1,Playback(8)
exten => 8,n,Goto(i,1)

exten => 9,1,Playback(9)
exten => 9,n,Goto(Provider_Videomail,start,1)

exten => *,1,Playback(number_star-recording1)
exten => *,n,Goto(bye,1)

exten => i,1,Playback(pbx-invalid)
exten => i,n,Goto(start,21)

exten => t,1,Playback(GoodBye-recording0)
exten => t,n,Hangup()
; Goodbye
exten => bye,1,Playback(GoodBye-recording0)
exten => bye,n,Hangup()

[call_center_closed_caller_query]
exten => start,1,(start)
exten => start,n,Verbose(2,${CALLERID(number)} entering the query from your provider for proper queue placement.)
exten => start,n,Goto(start,21)
exten => start,21,Background(afterhours)
exten => start,n,Goto(start,25)
exten => start,25,WaitExten(20)

; HANDLE THE DTMF CODES AS AN EXTENSION
exten => 9,1,Playback(number_9-recording0)
exten => 9,n,Goto(Provider_Videomail,start,1)

exten => i,1,Playback(pbx-invalid)
exten => i,n,Goto(start,21)

; Goodbye
exten => bye,1,Playback(GoodBye-recording0)
exten => bye,n,Hangup()

[codecid]
;this subroutine sets the corresponding codec from the caller
;part 2 of subrouting "if_vp8"
exten => if_vp8,1,NoOp()
    same => n,Set(JITTERBUFFER(adaptive)=800,,60) 
    same => n,Set(codec=vp8)
    same => n,Set(PJSIP_MEDIA_OFFER(video)=${codec})
    same => n,Set(PJSIP_SEND_SESSION_REFRESH()=invite)
    same => n,DumpChan()
    same => n,Return()

;part 2 of subroutine "if H264"
exten => if_h264,1,NoOp()
    same => n,Set(JITTERBUFFER(adaptive)=800,,60)
    same => n,Set(codec=h264)
    same => n,Set(PJSIP_MEDIA_OFFER(video)=${codec})
    same => n,Set(PJSIP_SEND_SESSION_REFRESH()=invite)
    same => n,DumpChan()
    same => n,Return()

;The purpose of this context is to allow users in the complaints or general
;questions queue to leave their respective queue and switch to the mail queue
;to leave a video mail. Users can send the "1" DTMF tone to switch to the 
;mail queue. In order to enable this functionality, we must specify this to be
;the context of the complaints and general questions queues in queues.conf,
;and add the 'T' option to the Queue() functions of the aforementioned queues
;for both WebRTC and VRS/Provider calls.
[Videomail_Transfer]
exten => 1,1,GotoIf($[$["${codec:0:3}" = "vp9"] | $["${codec:0:3}" = "vp8"]]?vp8,1)
exten => 1,n,GotoIf($[$["${codec:0:4}" = "h264"]]?Provider_Videomail,start,1)
exten => vp8,1,Queue(MailQueue)

;*************
; General Questions Queue
;*************
[General_Questions]
;this determines the callers codec and routes it accordingly.
exten => if_vp8,1,NoOp()
    same => n,Set(codec=vp8)
    same => n,Queue(GeneralQuestionsQueue,,,,,,,1(codecid^if_vp8^1),T)

exten => if_h264,1,NoOp()
    same => n,Set(codec=h264)
    same => n,Queue(GeneralQuestionsQueue,,,,,,,1(codecid^if_h264^1),T)


exten => start,1,Verbose(2,${CALLERID(num)} entering the general questions queue from WebRTC Consumer Portal)
exten => start,2,Set(qinfo=${QUEUE_VARIABLES(General_Questions)}) ; get the QUEUE information. returns 0 f successful
exten => start,3,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
exten => start,4,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => start,5,Set(ACTUALTO=pjsip:${CALLERID(num)})
exten => start,6,Set(ACTUALFROM=${EXTEN})
exten => start,7,Macro(sendIMmacro,"You are in the General Questions Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})

;The lines below retrieve the preferred codec of the caller, and routes the caller to the corresponding subroutine. This places the caller into the queue with the instructions of calling a codec specific subroutine when the call is connected thus offering the callers codec.

	;This retrieves the pjsip SDP video codecs
			exten => start,8,Set(codec=${PJSIP_MEDIA_OFFER(video)})

	;This looks at the variable and determines which codec is first, if vp8 or vp9, we go to VPx subroutine, else we assume H264 and go to h264 subroutine.
	;Match for vp8/vp9 preferred codec if present in the SDP offer, if it is not the first codec, move to next
			exten => start,9,GotoIf($[$["${codec:0:3}" = "vp9"] | $["${codec:0:3}" = "vp8"]]?if_vp8,1)

	;Match for h264 preferred codec if present in the SDP offer, if it is not present, agent is not capable of receiving call and progresses to next line in dial plan. (or set :context,extension,priority) to send caller to another part of dial plan.
			exten => start,10,GotoIf($[$["${codec:0:4}" = "h264"]]?if_h264,1)

; in case no agent is registered with the Q, and no codec is matched.
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})

;VIDEO notice -No agent available
exten => start,n,Playback(rep_not_available-recording1) ;,skip
exten => start,n,Goto(Goodbye-video,bye,1)
exten => start, n,Hangup()


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Complaints Queue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Complaints]  ;from portal
;this determines the callers codec and routes it accordingly.
exten => if_vp8,1,NoOp()
        same => n,Set(codec=vp8)
        same => n,Queue(ComplaintsQueue,,,,,,,1(codecid^if_vp8^1),T)

exten => if_h264,1,NoOp()
        same => n,Set(codec=h264)
        same => n,Queue(ComplaintsQueue,,,,,,,1(codecid^if_h264^1),T)


;Complaints queue sequence of setting variables.
	exten => start,1,Verbose(2,${CALLERID(num)} entering the Complaints queue from WebRTC Consumer Portal)
	exten => start,2,Set(qinfo=${QUEUE_VARIABLES(ComplaintsQueue)}) ; get the QUEUE information. returns 0 f successful
	exten => start,3,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
	exten => start,4,Set(CALLERID(name)=${CALLERID(name):0:40})
	exten => start,5,Set(ACTUALTO=pjsip:${CALLERID(num)})
	exten => start,6,Set(ACTUALFROM=${EXTEN})
	exten => start,7,Macro(sendIMmacro,"You are in the Complaints Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
;The lines below retrieve the preferred codec of the caller, and routes the caller to the corresponding subroutine. This places the caller into the queue with the instructions of calling a codec specific subroutine when the call is connected thus offering the callers codec. 
		;This retrieves the pjsip SDP video codecs	
			exten => start,8,Set(codec=${PJSIP_MEDIA_OFFER(video)})
;This looks at the variable and determines which codec is first, if vp8 or vp9, we go to VPx subroutine, else we assume H264 and go to h264 subroutine.	
		;Match for vp8/vp9 preferred codec if present in the SDP offer, if it is not the first codec, move to next
			exten => start,9,GotoIf($[$["${codec:0:3}" = "vp9"] | $["${codec:0:3}" = "vp8"]]?if_vp8,1)
		;Match for h264 preferred codec if present in the SDP offer, if it is not present, agent is not capable of receiving call and progresses to next line in dial plan. (or set :context,extension,priority) to send caller to another part of dial plan.
			exten => start,10,GotoIf($[$["${codec:0:4}" = "h264"]]?if_h264,1)

; in case no agent is registered with the Q, and no codec is matched.
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})

;VIDEO notice -No agent available
exten => start,n,Playback(rep_not_available-recording1) ;,skip
exten => start,n,Goto(Goodbye-video,bye,1)
exten => start, n,Hangup()

[Goodbye-video]
exten => bye,1,Playback(quiet_1sec)
exten => bye,2,Playback(GoodBye-recording0)
exten => bye,3,Hangup()

[macro-sendIM_Q_macro]
exten => i,1,Set(MESSAGE(body)=${MYARG1})
exten => s,n,Macro(${MYARG1},${MYARG2},${MYARG3})

[macro-sendIMmacro]
;ARG1 -message to send
;ARG2 -SIP recipient
;ARG3 -SIP sender
exten => s,1,Set(MESSAGE(body)=${ARG1})
exten => s,n,MessageSend(${ACTUALTO},${ACTUALFROM})

[Provider_General_Questions] ;General Questions Queue from provider phones (ZVRSGeneralQuestionsQueue)
;exten => start,1,Background(je_generalq)
exten => start,1,Verbose(2,${CALLERID(num)} entering the General Questions queue from a Provider Device)
exten => start,n,Set(qinfo=${QUEUE_VARIABLES(GeneralQuestionsQueue)}) ; get the QUEUE information. returns 0 f successful
exten => start,n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
exten => start,n,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => start,n,Set(ACTUALTO=pjsip:${CALLERID(num)})
exten => start,n,Set(ACTUALFROM=${EXTEN})
exten => start,n,Macro(sendIMmacro,"You are in the General Questions Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
; load up the variables that will be accessed from the queue app by he macro that is passed
exten => start,n,Set(_MYARG1="You are now connected to an agent who can handle your call.  Thank you.")
exten => start,n,Set(_MYARG2=${ACTUALTO})
exten => start,n,Set(_MYARG3=${ACTUALFROM})
; execute the queue and pass the macro
exten => start,n,Verbose(2,The callers video codecs are ${PJSIP_MEDIA_OFFER(video)})
exten => start,n,Verbose(2,The callers audio codecs are ${PJSIP_MEDIA_OFFER(audio)})
;Set Codecs to Variable
exten => start,n,Set(codec=${PJSIP_MEDIA_OFFER(video)})
; Set musiconhold class to the video queue class
exten => start,n,Set(CHANNEL(musicclass)=videoqueue)
exten => start,n,Queue(GeneralQuestionsQueue,,,,,,,1(from-internal^${DB(GLOBAL/DIALIN)}^1),T)

; in case no agent is registered with the Q
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})
exten => start,n,Playback(vm-nobodyavail)
exten => start,n,Playback(vm-goodbye)
exten => start,n,Hangup()

[Provider_Complaints] ;Complaints Queue From Provider Phones (ZVRSComplaintsQueue)
;exten => start,1,Background(je_complaintsq)
exten => start,1,DumpChan()
exten => start,n,Verbose(2,${CALLERID(num)} entering the Complaints Queue from a Provider Device)
exten => start,n,Set(qinfo=${QUEUE_VARIABLES(ComplaintsQueue)}) ; get the QUEUE information. returns 0 f successful
exten => start,n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
exten => start,n,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => start,n,Set(ACTUALTO=pjsip:${CALLERID(num)})
exten => start,n,Set(ACTUALFROM=${EXTEN})
exten => start,n,Macro(sendIMmacro,"You are in the Complaints Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
; load up the variables that will be accessed from the queue app by he macro that is passed
exten => start,n,Set(_MYARG1="You are now connected to an agent who can handle your call.  Thank you.")
exten => start,n,Set(_MYARG2=${ACTUALTO})
exten => start,n,Set(_MYARG3=${ACTUALFROM})
; execute the queue and pass the macro
;exten => start,n,Queue(ComplaintsQueue,t)
exten => start,n,Verbose(2,The callers video codecs are ${PJSIP_MEDIA_OFFER(video)})
exten => start,n,Verbose(2,The callers audio codecs are ${PJSIP_MEDIA_OFFER(audio)})
exten => start,n,Set(codec=${PJSIP_MEDIA_OFFER(video)})
;exten => start,n,Set(codec=h264)
; Set musiconhold class to the video queue class
exten => start,n,Set(CHANNEL(musicclass)=videoqueue)
exten => start,n,Queue(ComplaintsQueue,,,,,,,1(from-internal^${DB(GLOBAL/DIALIN)}^1),T)
; in case no agent is registered with the Q
exten => start,n,Hangup()
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})
exten => start,n,Playback(vm-nobodyavail)
exten => start,n,Playback(vm-goodbye)
exten => start,n,Hangup()

; DTMF tome to move user to VideoMail Queue
exten => 1,1,Goto(Provider_Videomail,start,1)

[Provider_Videomail] ;Complaints Queue From Provider Phones (ZVRSComplaintsQueue)
;;;;;;;exten => start,1,Background(je_complaintsq)
exten => start,1,DumpChan()
exten => start,n,Verbose(2,${CALLERID(num)} entering the Non-VIDEO AQ_Comp queue)
exten => start,n,Set(qinfo=${QUEUE_VARIABLES(ComplaintsQueue)}) ; get the QUEUE information. returns 0 f successful
exten => start,n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
exten => start,n,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => start,n,Set(ACTUALTO=pjsip:${CALLERID(num)})
exten => start,n,Set(ACTUALFROM=${EXTEN})
exten => start,n,Macro(sendIMmacro,"You are in the Complaints Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
; load up the variables that will be accessed from the queue app by he macro that is passed
exten => start,n,Set(_MYARG1="You are now connected to an agent who can handle your call.  Thank you.")
exten => start,n,Set(_MYARG2=${ACTUALTO})
exten => start,n,Set(_MYARG3=${ACTUALFROM})
; execute the queue and pass the macro
exten => start,n,Set(codec=h264)
exten => start,n,Queue(MailQueue,,,,,,,1(from-internal^${DB(GLOBAL/DIALIN)}^1))
;exten => start,n,Queue(ComplaintsQueue,t)
; in case no agent is registered with the Q
exten => start,n,Hangup()
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})
exten => start,n,Playback(vm-nobodyavail)
exten => start,n,Playback(vm-goodbye)
exten => start,n,Hangup()

;///////////End Asterisk informational text context/////////

;/////////PSTN Inbound/Outbound Dial Plan////////////////

[from-twilio]
exten => _+1NXXXXXXXXX,1,Answer()
        same => n,Goto(from-providers,_${DB(GLOBAL/DIALIN)},1)
        same => n,DumpChan()


[from-phones]
exten => _NXXNXXXXXX,1,Set(CALLERID(all)="ACE Direct" <${DB(GLOBAL/DIALIN)}>)
same => n,DumpChan()
same => n,Dial(PJSIP/+1${EXTEN}@twilio0)

;[playback-dummy]
;exten => start,1,Playback(je_titlescreen)


;This context allows for internal SIP text messages to be sent from endpoint to endpoint, or from server to endpoint. This can be useful for sending server messages to all registered endpoints such as Alerts, Warnings, or other information.
[internal-im]
exten => _X.,1,NoOp(Messaging dialplan invoked)
exten => _X.,n,NoOp(To ${MESSAGE(to)})
exten => _X.,n,NoOp(From ${MESSAGE(from)})
exten => _X.,n,NoOp(Body ${MESSAGE(body)})
;exten => _.,n,AGI(chatplan.php,${MESSAGE(from)})
exten => _X.,n,Set(ACTUALTO=${CUT(MESSAGE(to),@,1)})
;exten => _.,n,ExecIf($["${ACTUALTO}" != "sip:${EXTEN}"]?Set(ACTUALTO=sip:${EXTEN}))
;exten => _.,n,MessageSend(${MESSAGE(to)},${MESSAGE(from)})

exten => _X.,n,MessageSend(${ACTUALTO},${MESSAGE(from)})
exten => _X.,n,NoOp(Send status is ${MESSAGE_SEND_STATUS})
exten => _X.,n,GotoIf($["${MESSAGE_SEND_STATUS}" != "SUCCESS"]?sendfailedmsg)
exten => _X.,n,Hangup()
;
; Handle failed messaging
exten => _X.,n(sendfailedmsg),NoOp(Sending error to user)
exten => _X.,n,Set(SRC=${MESSAGE(from)})
exten => _X.,n,Set(DST=${MESSAGE(to)})
exten => _X.,n,Set(MSG=${MESSAGE(body)})
exten => _X.,n,Set(MESSAGE(body)="[${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)}] Your message to ${EXTEN} has failed. Sending when available")
exten => _X.,n,Set(ME_1=${CUT(MESSAGE(from),<,2)})
exten => _X.,n,Set(ACTUALFROM=${CUT(ME_1,@,1)})
exten => _X.,n,MessageSend(${ACTUALFROM},ServiceCenter)
exten => _X.,n,GotoIf($["${INQUEUE}" != "1"]?startq)
exten => _X.,n,Hangup()
;
exten => _X.,n(startq),NoOp(Queueing messaging for offline)
exten => _X.,n,Set(MSGTIME=${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)})
exten => _X.,n,SYSTEM(/var/lib/asterisk/agi-bin/astqueue.sh –SRC ‘${SRC}’ –DST ‘${DST}’ –MSG ‘${MSG}’)
exten => _X.,n,Hangup()[app-fakeanswer]
;exten => _X.,1,NoCDR
exten => _X.,n,Set(DESTDEV=${EXTEN})
exten => _X.,n,Set(THISDEVSTATE=${DEVICE_STATE(SIP/${DESTDEV})})
exten => _X.,n,GotoIf($["${THISDEVSTATE}" = "UNAVAILABLE"]?hang)
exten => _X.,n,GotoIf($["${THISDEVSTATE}" = "UNKNOWN"]?hang)
exten => _X.,n,Answer
exten => _X.,n,Hangup()
exten => _X.,n(hang),Hangup()

